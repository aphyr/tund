#!/usr/bin/env ruby

require 'yaml'
require 'open3'

class Tunneler
  DEFAULT_OPTS = {
    :local => {
    :host => 'localhost',        # Local host to forward to
    :port => 22                  # Local port to forward to
  },
    :remote => {
    :host => 'remote.server',    # Remote host to connect to
    :user => 'tunnel',           # Remote user
    :ssh_port => 22,             # Remote port SSH runs on
    :fwd_port => 2222            # Remote port which will be forwarded
  },
    :ssh => {
    :bin => '/usr/bin/ssh',         # SSH executable
    :identity => '/etc/tund/key',   # The SSH identity file
    :opts => '-gN'                  # Additional options
  },
    :interval => 300            # How often to attempt reconnection, in seconds
  }

  attr_accessor :opts

  def initialize()
  end
  
  def merge_opts(a, b)
    b.inject(a.dup) do |h, pair|
      key, value = pair
      h[key.to_sym] = case value
                      when Hash
                        merge_opts(a[key.to_sym], b[key])
                      else
                        value
                      end

      h
    end 
  end

  def opts
    return @opts if @opts

    @opts = self.merge_opts(
      DEFAULT_OPTS,
      YAML.load(File.read('/etc/tund/tund.conf'))
    )
  end

  def run
    loop do
      begin
        tunnel
      rescue Exception => e
        puts e
        puts e.backtrace.join("\n")
      end
      sleep @opts[:interval]
    end
  end

  # Opens the SSH tunnel
  def tunnel
    stdin, stdout, waiter = Open3.popen2e(
      opts[:ssh][:bin],
      opts[:ssh][:opts],
      '-p', opts[:remote][:ssh_port].to_s,
      '-i', opts[:ssh][:identity],
      '-R', [
        opts[:remote][:fwd_port],
        opts[:local][:host],
        opts[:local][:port]
      ].join(':'),
      "#{opts[:remote][:user]}@#{opts[:remote][:host]}"
    ) do |stdin, stdout, thread|
      stdin.close
      stdout.each do |line|
        puts "SSH: #{line}"
      end
    end
  end
end

if $0 == __FILE__
  trap 'INT' do
    puts "SIGINT!"
    exit!
  end
  Tunneler.new.run
end
